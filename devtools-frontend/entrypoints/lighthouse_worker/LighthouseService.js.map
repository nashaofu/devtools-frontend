{"version":3,"file":"LighthouseService.js","sourceRoot":"","sources":["../../../../../../front_end/entrypoints/lighthouse_worker/LighthouseService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Root from '../../core/root/root.js';\n\nfunction disableLoggingForTest(): void {\n  console.log = (): void => undefined;  // eslint-disable-line no-console\n}\n\n/**\n * Any message that comes back from Lighthouse has to go via a so-called \"port\".\n * This class holds the relevant callbacks that Lighthouse provides and that\n * can be called in the onmessage callback of the worker, so that the frontend\n * can communicate to Lighthouse. Lighthouse itself communicates to the frontend\n * via status updates defined below.\n */\nclass LighthousePort {\n  onMessage?: (message: string) => void;\n  onClose?: () => void;\n  on(eventName: string, callback: (arg?: string) => void): void {\n    if (eventName === 'message') {\n      this.onMessage = callback;\n    } else if (eventName === 'close') {\n      this.onClose = callback;\n    }\n  }\n\n  send(message: string): void {\n    notifyFrontendViaWorkerMessage('sendProtocolMessage', {message});\n  }\n  close(): void {\n  }\n}\n\nconst port = new LighthousePort();\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function start(params: any): Promise<unknown> {\n  if (Root.Runtime.Runtime.queryParam('isUnderTest')) {\n    disableLoggingForTest();\n    params.flags.maxWaitForLoad = 2 * 1000;\n  }\n\n  // @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\n  self.listenForStatus(message => {\n    notifyFrontendViaWorkerMessage('statusUpdate', {message: message[1]});\n  });\n\n  try {\n    const locale = await fetchLocaleData(params.locales);\n    const flags = params.flags;\n    flags.logLevel = flags.logLevel || 'info';\n    flags.channel = 'devtools';\n    flags.locale = locale;\n\n    // @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\n    const connection = self.setUpWorkerConnection(port);\n    // @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\n    const config = self.createConfig(params.categoryIDs, flags.emulatedFormFactor);\n    const url = params.url;\n\n    // @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\n    return await self.runLighthouse(url, flags, config, connection);\n  } catch (err) {\n    return ({\n      fatal: true,\n      message: err.message,\n      stack: err.stack,\n    });\n  }\n}\n\n/**\n * Finds a locale supported by Lighthouse from the user's system locales.\n * If no matching locale is found, or if fetching locale data fails, this function returns nothing\n * and Lighthouse will use `en-US` by default.\n */\nasync function fetchLocaleData(locales: string[]): Promise<string|void> {\n  // @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\n  const locale = self.lookupLocale(locales);\n\n  // If the locale is en-US, no need to fetch locale data.\n  if (locale === 'en-US' || locale === 'en') {\n    return;\n  }\n\n  // Try to load the locale data.\n  try {\n    const remoteBase = Root.Runtime.getRemoteBase();\n    let localeUrl: string;\n    if (remoteBase && remoteBase.base) {\n      localeUrl = `${remoteBase.base}third_party/lighthouse/locales/${locale}.json`;\n    } else {\n      localeUrl = new URL(`../../third_party/lighthouse/locales/${locale}.json`, import.meta.url).toString();\n    }\n\n    const timeoutPromise = new Promise<string>(\n        (resolve, reject) => setTimeout(() => reject(new Error('timed out fetching locale')), 5000));\n    const localeData = await Promise.race([timeoutPromise, fetch(localeUrl).then(result => result.json())]);\n    // @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\n    self.registerLocaleData(locale, localeData);\n    return locale;\n  } catch (err) {\n    console.error(err);\n  }\n\n  return;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction notifyFrontendViaWorkerMessage(method: string, params: any): void {\n  self.postMessage(JSON.stringify({method, params}));\n}\n\nself.onmessage = async(event: MessageEvent): Promise<void> => {\n  const messageFromFrontend = JSON.parse(event.data);\n  if (messageFromFrontend.method === 'start') {\n    const result = await start(messageFromFrontend.params);\n    self.postMessage(JSON.stringify({id: messageFromFrontend.id, result}));\n  } else if (messageFromFrontend.method === 'dispatchProtocolMessage') {\n    if (port.onMessage) {\n      port.onMessage(messageFromFrontend.params.message);\n    }\n  } else {\n    throw new Error(`Unknown event: ${event.data}`);\n  }\n};\n\n// Make lighthouse and traceviewer happy.\n// @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\nglobalThis.global = self;\n// @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\nglobalThis.global.isVinn = true;\n// @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\nglobalThis.global.document = {};\n// @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\nglobalThis.global.document.documentElement = {};\n// @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\nglobalThis.global.document.documentElement.style = {\n  WebkitAppearance: 'WebkitAppearance',\n};\n"]}