{"version":3,"file":"CodeMirrorUtils.js","sourceRoot":"","sources":["../../../../../../front_end/models/text_utils/CodeMirrorUtils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AAKH,OAAO,0EAA0E,CAAC;AAClF,OAAO,sDAAsD,CAAC;AAI9D,IAAI,wBAA0C,CAAC;AAK/C,MAAM,OAAO,gBAAgB;IAC3B,MAAM,CAAC,QAAQ,CAAC,OAAiC,EAAC,QAAQ,EAAE,IAAI,EAAC;QAC/D,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,wBAAwB,IAAI,QAAQ,EAAE;YACzC,wBAAwB,GAAG,IAAI,gBAAgB,EAAE,CAAC;SACnD;QAED,OAAO,wBAAwB,CAAC;IAClC,CAAC;IAED,gDAAgD;IAChD,OAAO,CAAC,QAAgB;QACtB,OAAO,UAAU,CAAC,OAAO,CAAC,EAAC,UAAU,EAAE,CAAC,EAAC,EAAE,QAAQ,CAAC,CAAC;IACvD,CAAC;IAED,gDAAgD;IAChD,eAAe,CAAC,QAAgB;QAC9B,MAAM,MAAM,GAAG,UAAU,CAAC,OAAO,CAAC,EAAC,UAAU,EAAE,CAAC,EAAC,EAAE,QAAQ,CAAC,CAAC;QAC7D,MAAM,KAAK,GAAG,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAE5C,SAAS,QAAQ,CACb,IAAY,EAAE,QAAiF;YACjG,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YACjD,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE;gBACpB,MAAM,KAAK,GACN,MAAM,CAAC,KAA4E,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;gBACxG,MAAM,KAAK,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;gBAC/B,QAAQ,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;gBAClE,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC;aAC3B;QACH,CAAC;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF","sourcesContent":["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport type * as CodeMirrorModule from '../../third_party/codemirror/codemirror-legacy.js'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport '../../third_party/codemirror/package/addon/runmode/runmode-standalone.js';\nimport '../../third_party/codemirror/package/mode/css/css.js';\n\nimport type * as TextUtils from './TextUtils.js';\n\nlet tokenizerFactoryInstance: TokenizerFactory;\n\nexport type Tokenizer =\n    (line: string, callback: (value: string, style: string|null, start: number, end: number) => void) => void;\n\nexport class TokenizerFactory implements TextUtils.TokenizerFactory {\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): TokenizerFactory {\n    const {forceNew} = opts;\n    if (!tokenizerFactoryInstance || forceNew) {\n      tokenizerFactoryInstance = new TokenizerFactory();\n    }\n\n    return tokenizerFactoryInstance;\n  }\n\n  // https://crbug.com/1151919 * = CodeMirror.Mode\n  getMode(mimeType: string): any {\n    return CodeMirror.getMode({indentUnit: 2}, mimeType);\n  }\n\n  // https://crbug.com/1151919 * = CodeMirror.Mode\n  createTokenizer(mimeType: string): Tokenizer {\n    const cmMode = CodeMirror.getMode({indentUnit: 2}, mimeType);\n    const state = CodeMirror.startState(cmMode);\n\n    function tokenize(\n        line: string, callback: (value: string, style: string|null, start: number, end: number) => void): void {\n      const stream = new CodeMirror.StringStream(line);\n      while (!stream.eol()) {\n        const style =\n            (cmMode.token as (stream: CodeMirror.StringStream, state: unknown) => string | null)(stream, state);\n        const value = stream.current();\n        callback(value, style, stream.start, stream.start + value.length);\n        stream.start = stream.pos;\n      }\n    }\n    return tokenize;\n  }\n}\n"]}